# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

dotenv: [".env"]

vars:
  EXECUTABLE: videotagger
  BUILDDIR: build

tasks:
  build:
    deps: [test, lint]
    cmds:
      - go build -v -ldflags="-X main.Version={{.VERSION}}" -o {{.BUILDDIR}}/{{.EXECUTABLE}} main.go
    sources:
      - ./*.go
    generates:
      - "{{.BUILDDIR}}/{{.EXECUTABLE}}"
    vars:
      VERSION:
        sh: |
          tag=$(git describe --tags 2>/dev/null || echo "dev")
          commit=$(git log -n 1 --format=%h)
          if [ "$tag" = "dev" ]; then
            echo "dev-$(date '+%Y-%m-%d_%H:%M:%S')"
          else
            echo "$tag-$commit"
          fi

  build-linux:
    deps: [test, lint]
    cmds:
      - GOOS=linux GOARCH=amd64 go build -v -ldflags="-X main.Version={{.VERSION}}" -o {{.BUILDDIR}}/{{.EXECUTABLE}}-linux main.go
    sources:
      - ./*.go
    generates:
      - "{{.BUILDDIR}}/{{.EXECUTABLE}}-linux"
    vars:
      VERSION:
        sh: |
          tag=$(git describe --tags 2>/dev/null || echo "dev")
          commit=$(git log -n 1 --format=%h)
          if [ "$tag" = "dev" ]; then
            echo "dev-$(date '+%Y-%m-%d_%H:%M:%S')"
          else
            echo "$tag-$commit"
          fi

  build-ci:
    deps: [test-ci, lint]
    cmds:
      - go build -v -ldflags="-X main.Version={{.VERSION}}" -o {{.BUILDDIR}}/{{.EXECUTABLE}} main.go
    sources:
      - ./*.go
    generates:
      - "{{.BUILDDIR}}/{{.EXECUTABLE}}"
    vars:
      VERSION:
        sh: |
          tag=$(git describe --tags 2>/dev/null || echo "dev")
          commit=$(git log -n 1 --format=%h)
          if [ "$tag" = "dev" ]; then
            echo "dev-$(date '+%Y-%m-%d_%H:%M:%S')"
          else
            echo "$tag-$commit"
          fi

  test:
    cmds:
      - go test -v ./...
    sources:
      - ./*.go

  test-ci:
    cmds:
      - go test -tags=ci -cover -v ./...
    sources:
      - ./*.go

  vet:
    cmds:
      - go vet ./...
    sources:
      - ./*.go

  publish:
    deps: [build]
    cmds:
      - echo "Publishing to bin"
      - mkdir -p $HOME/bin/
      - cp {{.BUILDDIR}}/{{.EXECUTABLE}} $HOME/bin/

  lint:
    desc: Run Go linters
    cmds:
      - golangci-lint run ./...
    sources:
      - ./**/*.go
    silent: true

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILDDIR}}

  upgrade-deps:
    desc: Upgrade all dependencies to their latest versions
    silent: true
    cmds:
      - go get -u ./...
      - go mod tidy
      - echo "✅ Dependencies upgraded successfully"
    sources:
      - go.mod
      - go.sum
    generates:
      - go.mod
      - go.sum

  gen-test-files:
    desc: Generate test video files in temporary directory for testing
    cmds:
      - |
        TESTDIR="/tmp/videotagger-test-$(date +%s)"
        mkdir -p "$TESTDIR"
        echo "📁 Creating test files in: $TESTDIR"
        
        # Create test video files using FFmpeg (if available)
        if command -v ffmpeg >/dev/null 2>&1; then
          echo "🎬 Generating test videos with FFmpeg..."
          # Create a 5-second 720p test video
          ffmpeg -f lavfi -i testsrc=duration=5:size=1280x720:rate=30 -c:v libx264 -t 5 "$TESTDIR/test_720p.mp4" -y -loglevel quiet
          # Create a 3-second 1080p test video  
          ffmpeg -f lavfi -i testsrc=duration=3:size=1920x1080:rate=30 -c:v libx264 -t 3 "$TESTDIR/test_1080p.mp4" -y -loglevel quiet
          # Create a duplicate of the 720p video
          cp "$TESTDIR/test_720p.mp4" "$TESTDIR/duplicate_720p.mp4"
          echo "✅ Generated 3 test video files"
        else
          echo "⚠️  FFmpeg not found, creating placeholder files..."
          # Create placeholder files that look like videos but won't process
          touch "$TESTDIR/test_720p.mp4"
          touch "$TESTDIR/test_1080p.mp4" 
          touch "$TESTDIR/duplicate_720p.mp4"
          echo "⚠️  Created placeholder files (install FFmpeg for real videos)"
        fi
        
        # Create some non-video files to test filtering
        echo "test content" > "$TESTDIR/readme.txt"
        echo "more content" > "$TESTDIR/document.pdf"
        
        echo ""
        echo "🧪 Test directory ready: $TESTDIR"
        echo "📋 Files created:"
        ls -la "$TESTDIR"
        echo ""
        echo "🚀 Test commands:"
        echo "   ./build/videotagger tag $TESTDIR/*.mp4"
        echo "   ./build/videotagger duplicates $TESTDIR"
        echo "   ./build/videotagger verify $TESTDIR/*_[*].mp4"
        echo ""
        echo "🗑️  Cleanup when done: rm -rf $TESTDIR"
