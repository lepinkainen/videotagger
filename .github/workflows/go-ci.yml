---
name: Go CI

'on':
  push:
    branches: [main, feature/kong-phash]
  pull_request:
    branches: [main, feature/kong-phash]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true  # Automatically caches go.mod/go.sum dependencies

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Run tests with coverage
        run: task test-ci

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v2.4.0
          args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Build
        run: task build-only

      - name: Create nightly tag
        if: github.event_name == 'schedule'
        run: |
          NIGHTLY_TAG="nightly-$(date +%Y-%m-%d)"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$NIGHTLY_TAG" -m "Nightly build for $(date +%Y-%m-%d)"
          git push origin "$NIGHTLY_TAG"

      - name: Cleanup old nightly tags
        if: github.event_name == 'schedule'
        run: |
          # Keep last 30 days of nightly tags
          CUTOFF_DATE=$(date -d '30 days ago' +%Y-%m-%d)
          git fetch --tags
          for tag in $(git tag -l "nightly-*" | sort); do
            tag_date=$(echo "$tag" | sed 's/nightly-//')
            if [[ "$tag_date" < "$CUTOFF_DATE" ]]; then
              echo "Removing old nightly tag: $tag"
              git push --delete origin "$tag" || true
            fi
          done

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: success() && hashFiles('./coverage.out') != ''
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
